

Problem Statement:

Given two strings, find the length of the longest subsequence present in both of them. A subsequence is a sequence
that appears in the same relative order, but not necessarily continuous.

It is a classic computer science problem, the basis of diff, and has applications in bioinformatics.



*** DP SOLUTION

Suppose that m and n is length of str1 and str2 given, respectively.

LCS[i][j] indicates the length of longest common subsequence of str1[0..i-1] and str2[0..j-1], where
0 <= i <= m and 0 <= j <= n.

1. LCS[i][j] = 0, if i==0 or j==0;
2. LCS[i][j] = 1 + LCS[i-1][j-1], if str1[i-1] == str2[j-1];
3. LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]), if str1[i-1] != str2[j-1];

The final result is LCS[m][n].

The time complexity is O(m*n), the space complexity is O(m*n).


*** Optimization of DP SOLUTION

Reduce the size of LCS table from LCS[m+1][n+1] to LCS[2][n+1], because LCS[i][j] depends only
on LCS[i-1][j-1], LCS[i-1][j], LCS[i][j-1]. Therefore, the transformation formula converts to:

binary index: bi

bi = bi & i

1. LCS[bi][j] = 0, if i==0 or j==0;
2. LCS[bi][j] = LCS[1-bi][j-1], if str1[i-1] == str2[j-1];
3. LCS[bi][j] = max(LCS[1-bi][j], LCS[bi][j-1]), if str1[i-1] != str2[j-1]

The final result is LCS[bi][n]


