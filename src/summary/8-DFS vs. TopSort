
In the discussion below, the graph is represented as a adjacent list

1. DFS:

    def DFS(self, u):
        visited = [False] * V
        for u in range(V):
            if visited[u] == False:
                self.DFSUtil(visited, u)

    def DFSUtil(self, visited, u):
        visited[u] = True

        print u

        # traverse adjacent vertices of u
        for v in self.graph[u]:
            self.DFSUtil(visited, v)



2. TopSort: Basically, there are two algorithms that can achieve top sort: one is Tarjan's algorithm, one is
            Kahn's algorithm. Tarjan's algorithm is based on DFS idea.


    # graph is represented as an adjacent list
    # V is number of vertices in graph
    #
    def TopSort_Tarjan(self, graph, V):
        # permanent mark
        visited = [False] * V
        # temporary mark
        onpath = [False] * V
        # a valid sort
        after_sort = []

        for u in range(V):
            if not visited[u] and not self.TopSortUtil(u, graph, visited, onpath, after_sort):
                return False  # graph has cycle

        # print the valid sort
        print after_sort

        return True

    def TopSortUtil(self, u, graph, visited, onpath, after_sort):
        # if u is marked temporarily, it means graph has cycle
        if onpath[u]:
            return False

        onpath[u] = True

        # traverse adjacent vertices of u
        for v in self.graph[u]:
            if not visited[v] and not self.TopSortUtil(v, graph, visited, onpath, after_sort):
                return False

        # mark u permanently
        visited[u] = True
        # unmark u temporarily
        onpath[u] = False

        # add u to the head of after_sort list
        after_sort.insert(0, u)

        return True