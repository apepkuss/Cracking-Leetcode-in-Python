
Dynamic Programming is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and
stores the results of subproblems to avoid computing the same results again. Following are the two main properties of a
problem that suggest that the given problem can be solved using Dynamic programming.

    1) Overlapping Subproblems
    2) Optimal Substructure


1) Overlapping Subproblems:
Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. Dynamic Programming is mainly used when
solutions of same subproblems are needed again and again. In dynamic programming, computed solutions to subproblems are
stored in a table so that these don’t have to recomputed. So Dynamic Programming is not useful when there are no common
(overlapping) subproblems because there is no point storing the solutions if they are not needed again. For example,
Binary Search doesn’t have common subproblems. For computing Fibonacci Numbers, there are many subproblems which are
solved again and again.

There are following two different ways to store the values so that these values can be reused.

a) Memoization (Top Down)
b) Tabulation (Bottom Up)


a) Memoization (Top Down): The memoized program for a problem is similar to the recursive version with a small modification
   that it looks into a lookup table before computing solutions. Whenever we need solution to a subproblem, we first look
   into the lookup table. If the precomputed value is there then we return that value, otherwise we calculate the value
   and put the result in lookup table so that it can be reused later.

b) Tabulation (Bottom Up): The tabulated program for a given problem builds a table in bottom up fashion and returns the
   last entry from table.


Both tabulated and memoized store the solutions of subproblems. In memoized version, table is filled on demand while in
tabulated version, starting from the first entry, all entries are filled one by one. Unlike the tabulated version, all
entries of the lookup table are not necessarily filled in memoized version. For example, memoized solution of LCS problem
doesn’t necessarily fill all entries.


2) Optimal Substructure:
A given problems has Optimal Substructure Property if optimal solution of the given problem can be obtained by using
optimal solutions of its subproblems.

For example the shortest path problem has following optimal substructure property: If a node x lies in the shortest path
from a source node u to destination node v then the shortest path from u to v is combination of shortest path from u to
x and shortest path from x to v. The standard All Pair Shortest Path algorithms like Floyd–Warshall and Bellman–Ford are
typical examples of Dynamic Programming.




